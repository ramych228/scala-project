[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\ramil\AppData\Local\Temp\idea2.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\ramil\AppData\Local\Temp\idea2.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.9 (Eclipse Adoptium Java 17.0.4.1)
[debug]       Load.loadUnit: plugins took 106.8838ms
[debug]       Load.loadUnit: defsScala took 0.3877ms
[debug] [Loading] Scanning directory C:\Users\ramil\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\ramil\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 23.0603 ms
[debug]           Load.resolveProject(global-plugins) took 75.5501ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\ramil\.sbt\1.0\plugins, plugins: List(<none>))) took 128.4094ms
[debug] [Loading] Done in C:\Users\ramil\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 161.0829ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.6063ms
[debug]     Load.loadUnit(file:/C:/Users/ramil/.sbt/1.0/plugins/, ...) took 283.3097ms
[debug]   Load.apply: load took 570.8479ms
[debug]   Load.apply: resolveProjects took 8.3901ms
[debug]   Load.apply: finalTransforms took 72.9348ms
[debug]   Load.apply: config.delegates took 12.7312ms
[debug]   Load.apply: Def.make(settings)... took 525.6239ms
[debug]   Load.apply: structureIndex took 124.7331ms
[debug]   Load.apply: mkStreams took 2.1365ms
[info] loading global plugins from C:\Users\ramil\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3370.0536ms
[debug]           Load.loadUnit: plugins took 22.2105ms
[debug]           Load.loadUnit: defsScala took 0.0047ms
[debug] [Loading] Scanning directory C:\Users\ramil\IdeaProjects\scala_project\project
[debug]             Load.loadUnit: mkEval took 8.0007ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\ramil\IdeaProjects\scala_project\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.0927 ms
[info] loading settings for project scala_project-build from plugins.sbt,idea2.sbt ...
[debug]               Load.resolveProject(scala_project-build) took 8.0578ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scala_project-build, base: C:\Users\ramil\IdeaProjects\scala_project\project, plugins: List(<none>))) took 10.8803ms
[debug] [Loading] Done in C:\Users\ramil\IdeaProjects\scala_project\project, returning: (scala_project-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 194.2985ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.9884ms
[debug]         Load.loadUnit(file:/C:/Users/ramil/IdeaProjects/scala_project/project/, ...) took 224.5576ms
[debug]       Load.apply: load took 226.3257ms
[debug]       Load.apply: resolveProjects took 0.1358ms
[debug]       Load.apply: finalTransforms took 10.768ms
[debug]       Load.apply: config.delegates took 0.4564ms
[debug]       Load.apply: Def.make(settings)... took 116.4161ms
[debug]       Load.apply: structureIndex took 32.6549ms
[debug]       Load.apply: mkStreams took 0.0035ms
[info] loading project definition from C:\Users\ramil\IdeaProjects\scala_project\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 1634.9939ms
[debug]     Load.loadUnit: defsScala took 0.0031ms
[debug] [Loading] Scanning directory C:\Users\ramil\IdeaProjects\scala_project
[debug]       Load.loadUnit: mkEval took 0.2878ms
[debug] [Loading] Found root project config w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.scalafmt.sbt.ScalafmtPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.scalafmt.sbt.ScalafmtPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,org.scalafmt.sbt.ScalafmtPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.5834 ms
[info] loading settings for project config from build.sbt ...
[debug]         Load.resolveProject(config) took 43.3269ms
[debug]       Load.loadTransitive: finalizeProject(Project(id config, base: C:\Users\ramil\IdeaProjects\scala_project, plugins: List(<none>))) took 48.9352ms
[debug] [Loading] Done in C:\Users\ramil\IdeaProjects\scala_project, returning: (config)
[debug]     Load.loadUnit: loadedProjectsRaw took 161.9932ms
[debug]     Load.loadUnit: cleanEvalClasses took 7.7477ms
[debug]   Load.loadUnit(file:/C:/Users/ramil/IdeaProjects/scala_project/, ...) took 1805.5932ms
[debug] Load.apply: load took 1807.7559ms
[debug] Load.apply: resolveProjects took 0.2273ms
[debug] Load.apply: finalTransforms took 34.3894ms
[debug] Load.apply: config.delegates took 0.4497ms
[debug] Load.apply: Def.make(settings)... took 65.6077ms
[debug] Load.apply: structureIndex took 25.562ms
[debug] Load.apply: mkStreams took 0.0024ms
[info] set current project to config (in build file:/C:/Users/ramil/IdeaProjects/scala_project/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 49888 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 49888, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to config (in build file:/C:/Users/ramil/IdeaProjects/scala_project/)
[debug] > Exec(idea-shell, None, None)
